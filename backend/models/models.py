from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, Text, DateTime, Float, Table, JSON
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from database.database import Base

# User model with enhanced fields for adaptive learning
class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # New fields for adaptive learning
    total_xp = Column(Integer, default=0)
    current_streak = Column(Integer, default=0)
    longest_streak = Column(Integer, default=0)
    last_activity = Column(DateTime(timezone=True), server_default=func.now())
    learning_preferences = Column(JSON, default={})  # Stores user preferences like difficulty, pace
    
    # Relationships
    skill_progress = relationship("SkillProgress", back_populates="user")
    xp_transactions = relationship("XPTransaction", back_populates="user")
    quiz_attempts = relationship("QuizAttempt", back_populates="user")
    subskill_progress = relationship("SubskillProgress", back_populates="user")
    user_behavior = relationship("UserBehavior", back_populates="user")

# Enhanced Skill model with subskills support
class Skill(Base):
    __tablename__ = "skills"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, index=True)
    description = Column(Text)
    parent_id = Column(Integer, ForeignKey("skills.id"), nullable=True)
    difficulty_level = Column(String, default="beginner")  # beginner, intermediate, advanced
    estimated_duration = Column(String)  # e.g., "4 weeks"
    subskills = Column(JSON, default=[])  # List of subskill names
    created_by_ai = Column(Boolean, default=False)  # Whether generated by AI
    
    # Relationships
    children = relationship("Skill", backref="parent", remote_side=[id])
    resources = relationship("Resource", back_populates="skill")
    skill_progress = relationship("SkillProgress", back_populates="skill")
    quiz_attempts = relationship("QuizAttempt", back_populates="skill")

# New SubskillProgress model for granular tracking
class SubskillProgress(Base):
    __tablename__ = "subskill_progress"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    skill_id = Column(Integer, ForeignKey("skills.id"))
    subskill_name = Column(String)
    completed = Column(Boolean, default=False)
    time_spent_minutes = Column(Integer, default=0)
    completed_at = Column(DateTime(timezone=True), nullable=True)
    difficulty_rating = Column(Float, nullable=True)  # User's difficulty rating 1-5
    
    # Relationships
    user = relationship("User", back_populates="subskill_progress")
    skill = relationship("Skill")

# Enhanced Resource model with quality scoring
class Resource(Base):
    __tablename__ = "resources"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String)
    url = Column(String)
    description = Column(Text, nullable=True)
    resource_type = Column(String)  # video, article, github, course, documentation
    skill_id = Column(Integer, ForeignKey("skills.id"))
    subskill_name = Column(String, nullable=True)  # Which subskill this resource is for
    quality_score = Column(Float, default=0.0)  # AI-generated quality score
    difficulty_level = Column(String, default="beginner")
    estimated_duration = Column(String, nullable=True)  # e.g., "30 minutes"
    tags = Column(JSON, default=[])  # Searchable tags
    
    # Relationships
    skill = relationship("Skill", back_populates="resources")

# Quiz system models
class QuizQuestion(Base):
    __tablename__ = "quiz_questions"
    
    id = Column(Integer, primary_key=True, index=True)
    skill_id = Column(Integer, ForeignKey("skills.id"))
    subskill_name = Column(String)
    question = Column(Text)
    options = Column(JSON)  # List of answer options
    correct_answer = Column(String)
    explanation = Column(Text, nullable=True)
    difficulty = Column(String, default="medium")  # easy, medium, hard
    created_by_ai = Column(Boolean, default=False)
    
    # Relationships
    skill = relationship("Skill")

class QuizAttempt(Base):
    __tablename__ = "quiz_attempts"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    skill_id = Column(Integer, ForeignKey("skills.id"))
    questions_data = Column(JSON)  # The questions that were asked
    user_answers = Column(JSON)  # User's answers
    score = Column(Integer)  # Number of correct answers
    total_questions = Column(Integer)
    time_taken_seconds = Column(Integer)
    completed_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    user = relationship("User", back_populates="quiz_attempts")
    skill = relationship("Skill", back_populates="quiz_attempts")

# User behavior tracking for adaptive learning
class UserBehavior(Base):
    __tablename__ = "user_behavior"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    action_type = Column(String)  # view_resource, complete_subskill, take_quiz, skip_resource
    skill_id = Column(Integer, ForeignKey("skills.id"), nullable=True)
    subskill_name = Column(String, nullable=True)
    resource_id = Column(Integer, ForeignKey("resources.id"), nullable=True)
    additional_data = Column(JSON, default={})  # Additional data like time_spent, difficulty_rating
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    user = relationship("User", back_populates="user_behavior")
    skill = relationship("Skill")
    resource = relationship("Resource")

# Enhanced SkillProgress model
class SkillProgress(Base):
    __tablename__ = "skill_progress"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    skill_id = Column(Integer, ForeignKey("skills.id"))
    progress_percentage = Column(Float, default=0.0)
    completed = Column(Boolean, default=False)
    completed_subskills = Column(JSON, default=[])  # List of completed subskill names
    last_updated = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
    average_quiz_score = Column(Float, default=0.0)
    total_time_spent_minutes = Column(Integer, default=0)
    
    # Relationships
    user = relationship("User", back_populates="skill_progress")
    skill = relationship("Skill", back_populates="skill_progress")

# Enhanced XPTransaction model
class XPTransaction(Base):
    __tablename__ = "xp_transactions"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    amount = Column(Integer)  # XP points awarded
    transaction_type = Column(String)  # complete_subskill, quiz_bonus, streak_bonus, daily_goal
    description = Column(String)
    skill_id = Column(Integer, ForeignKey("skills.id"), nullable=True)
    additional_context = Column(JSON, default={})  # Additional context
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    user = relationship("User", back_populates="xp_transactions")
    skill = relationship("Skill")

# Recommendation system cache
class UserRecommendation(Base):
    __tablename__ = "user_recommendations"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    recommendation_type = Column(String)  # skill, resource, next_step
    recommended_item_id = Column(Integer)  # ID of skill or resource
    recommended_item_type = Column(String)  # skill, resource
    score = Column(Float)  # Recommendation confidence score
    reason = Column(String)  # Why this was recommended
    recommendation_data = Column(JSON, default={})
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    shown_to_user = Column(Boolean, default=False)
    user_action = Column(String, nullable=True)  # accepted, dismissed, ignored
    
    # Relationships
    user = relationship("User")
